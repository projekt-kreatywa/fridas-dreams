/**
 * Modules in this bundle
 * @license
 * 
 * glsl-dissolve:
 * 
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
! function e(n, t, i) {
    function o(a, s) {
        if (!t[a]) {
            if (!n[a]) {
                var v = "function" == typeof require && require;
                if (!s && v) return v(a, !0);
                if (r) return r(a, !0);
                var d = new Error("Cannot find module '" + a + "'");
                throw d.code = "MODULE_NOT_FOUND", d }
            var u = t[a] = { exports: {} };
            n[a][0].call(u.exports, function(e) {
                var t = n[a][1][e];
                return o(t ? t : e) }, u, u.exports, e, n, t, i) }
        return t[a].exports }
    for (var r = "function" == typeof require && require, a = 0; a < i.length; a++) o(i[a]);
    return o }({ 1: [function(e, n, t) { "use strict";

        function i(e) {
            return e && e.__esModule ? e : { "default": e } }
        var o = e("./modules/dissolve.js"),
            r = i(o),
            a = document.getElementById("canvas-webgl"),
            s = new THREE.WebGLRenderer({ antialias: !0, canvas: a, alpha: !0 }),
            v = new THREE.Scene,
            d = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1e4),
            u = new THREE.Clock,
            g = new Stats,
            f = ["img/flowers - 1 of 20.jpg", "img/flowers - 2 of 20.jpg", "img/flowers - 3 of 20.jpg", "img/flowers - 4 of 20.jpg", "img/flowers - 5 of 20.jpg", "img/flowers - 6 of 20.jpg", "img/flowers - 7 of 20.jpg", "img/flowers - 8 of 20.jpg", "img/flowers - 9 of 20.jpg", "img/flowers - 10 of 20.jpg"],
            c = new r["default"](f),
            l = function() { a.width = window.innerWidth, a.height = window.innerHeight, d.aspect = window.innerWidth / window.innerHeight, d.updateProjectionMatrix(), c.resize(), s.setSize(window.innerWidth, window.innerHeight) },
            x = function() { $(window).on("resize", function() { l() }) },
            m = function() {
                var e = new dat.GUI,
                    n = { time: e.add(c, "interval", 1, 10).name("interval").step(1), noiseX: e.add(c.noise, "x", 0, 100).name("noise x"), noiseY: e.add(c.noise, "y", 0, 100).name("noise y"), noiseZ: e.add(c.noise, "z", 0, 100).name("noise z"), prevEdgeStart: e.add(c.edge, "prev_start", 0, .1).name("prev edge start").step(.001), prevEdgeWidth: e.add(c.edge, "prev_width", 0, .1).name("prev edge width").step(.001), nextEdgeStart: e.add(c.edge, "next_start", 0, .1).name("next edge start").step(.001), nextEdgeWidth: e.add(c.edge, "next_width", 0, .1).name("next edge width").step(.001), stop: e.add(c, "stop").name("stop animation") };
                n.time.onChange(function(e) { c.uniforms.interval.value = e }), n.noiseX.onChange(function(e) { c.uniforms.noiseX.value = e }), n.noiseY.onChange(function(e) { c.uniforms.noiseY.value = e }), n.noiseZ.onChange(function(e) { c.uniforms.noiseZ.value = e }), n.prevEdgeStart.onChange(function(e) { c.uniforms.prevEdgeStart.value = e }), n.prevEdgeWidth.onChange(function(e) { c.uniforms.prevEdgeWidth.value = e }), n.nextEdgeStart.onChange(function(e) { c.uniforms.nextEdgeStart.value = e }), n.nextEdgeWidth.onChange(function(e) { c.uniforms.nextEdgeWidth.value = e }) },
            h = function() { g.showPanel(0), document.body.appendChild(g.dom) },
            p = function() { c.render(u.getDelta()), s.render(v, d) },
            y = function E() { g.begin(), p(), g.end(), requestAnimationFrame(E) },
            w = function() { s.setSize(window.innerWidth, window.innerHeight), s.setClearColor(16777215, 0), c.loadTexture(f, function() { setTimeout(function() { $(".p-preloader").addClass("is-hidden").on("transitionend", function() { $(this).addClass("is-stoped") }), v.add(c.mesh), x(), m(), h(), l(), y() }, 200) }) };
        w() }, { "./modules/dissolve.js": 2 }], 2: [function(e, n, t) { "use strict";

        function i(e, n) {
            if (!(e instanceof n)) throw new TypeError("Cannot call a class as a function") }
        Object.defineProperty(t, "__esModule", { value: !0 });
        var o = function() {
                function e(e, n) {
                    for (var t = 0; t < n.length; t++) {
                        var i = n[t];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }
                return function(n, t, i) {
                    return t && e(n.prototype, t), i && e(n, i), n } }(),
            r = function() {
                function e() { i(this, e), this.uniforms = {}, this.textures = [], this.interval = 3, this.noise = { x: 8, y: 6, z: 4 }, this.edge = { prev_start: .01, prev_width: .05, next_start: .01, next_width: .05 }, this.prev_num = 0, this.next_num = 0, this.stop = !1, this.mesh = null }
                return o(e, [{ key: "loadTexture", value: function(e, n) {
                        for (var t = this, i = 0, o = function() {
                                var o = r,
                                    a = new THREE.TextureLoader;
                                a.load(e[o], function(r) { r.magFilter = THREE.NearestFilter, r.minFilter = THREE.NearestFilter, t.textures[o] = r, i++, i == e.length && (t.mesh = t.createMesh(), n()) }) }, r = 0; r < e.length; r++) o() } }, { key: "createMesh", value: function() {
                        var e = new THREE.DataTexture(new Uint8Array([255, 255, 255, 0]), 1, 1, THREE.RGBAFormat, THREE.UnsignedByteType);
                        return e.needsUpdate = !0, this.uniforms = { time: { type: "f", value: 0 }, interval: { type: "f", value: this.interval }, resolution: { type: "v2", value: new THREE.Vector2(window.innerWidth, window.innerHeight) }, imageResolution: { type: "v2", value: new THREE.Vector2(2048, 1356) }, texPrev: { type: "t", value: e }, texNext: { type: "t", value: this.textures[0] }, noiseX: { type: "f", value: this.noise.x }, noiseY: { type: "f", value: this.noise.y }, noiseZ: { type: "f", value: this.noise.z }, prevEdgeStart: { type: "f", value: this.edge.prev_start }, prevEdgeWidth: { type: "f", value: this.edge.prev_width }, nextEdgeStart: { type: "f", value: this.edge.next_start }, nextEdgeWidth: { type: "f", value: this.edge.next_width } }, new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), new THREE.ShaderMaterial({ uniforms: this.uniforms, vertexShader: "#define GLSLIFY 1\nvarying vec3 vPosition;\nvarying vec2 vUv;\n\nvoid main(void) {\n  vPosition = position;\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n", fragmentShader: '#define GLSLIFY 1\nuniform float time;\nuniform vec2 resolution;\nuniform vec2 imageResolution;\nuniform sampler2D texPrev;\nuniform sampler2D texNext;\nuniform float noiseX;\nuniform float noiseY;\nuniform float noiseZ;\nuniform float prevEdgeStart;\nuniform float prevEdgeWidth;\nuniform float nextEdgeStart;\nuniform float nextEdgeWidth;\n\nvarying vec3 vPosition;\nvarying vec2 vUv;\n\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat quadraticInOut(float t) {\n  float p = 2.0 * t * t;\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\n\nvoid main(void) {\n  vec2 ratio = vec2(\n      min((resolution.x / resolution.y) / (imageResolution.x / imageResolution.y), 1.0),\n      min((resolution.y / resolution.x) / (imageResolution.y / imageResolution.x), 1.0)\n    );\n\n  vec2 uv = vec2(\n      vUv.x * ratio.x + (1.0 - ratio.x) * 0.5,\n      vUv.y * ratio.y + (1.0 - ratio.y) * 0.5\n    );\n  vec4 colorPrev = texture2D(texPrev, uv);\n  vec4 colorNext = texture2D(texNext, uv);\n\n  float noise = (cnoise(vec3(uv.x * noiseX, uv.y * noiseY, noiseZ)) + 1.0) / 2.0\n    * (1.0 - (prevEdgeStart + prevEdgeWidth + nextEdgeStart + nextEdgeWidth))\n    + (prevEdgeStart + prevEdgeWidth + nextEdgeStart + nextEdgeWidth) * 0.5;\n  float step = quadraticInOut(min((time), 1.0));\n\n  gl_FragColor = colorPrev * smoothstep(step - (prevEdgeStart + prevEdgeWidth), step - prevEdgeStart, noise)\n    + colorNext * smoothstep((1.0 - step) - (nextEdgeStart + nextEdgeWidth), (1.0 - step) - nextEdgeStart, (1.0 - noise));\n}\n', transparent: !0 })) } }, { key: "render", value: function(e) {
                        if (!this.stop && (this.uniforms.time.value += e / this.interval, this.uniforms.time.value > 1)) {
                            for (this.uniforms.time.value = 0, this.prev_num = this.next_num, this.uniforms.texPrev.value = this.textures[this.next_num]; this.next_num == this.prev_num;) this.next_num = Math.floor(Math.random() * this.textures.length);
                            this.uniforms.texNext.value = this.textures[this.next_num] } } }, { key: "resize", value: function() { this.uniforms.resolution.value.set(window.innerWidth, window.innerHeight) } }]), e }();
        t["default"] = r }, {}] }, {}, [1]);
